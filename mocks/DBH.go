// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mgo "gopkg.in/mgo.v2"
import mock "github.com/stretchr/testify/mock"

// DBH is an autogenerated mock type for the DBH type
type DBH struct {
	mock.Mock
}

// BulkInsert provides a mock function with given fields: _a0, _a1
func (_m *DBH) BulkInsert(_a0 string, _a1 ...interface{}) (*mgo.BulkResult, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	var r0 *mgo.BulkResult
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *mgo.BulkResult); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.BulkResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collection provides a mock function with given fields: _a0
func (_m *DBH) Collection(_a0 string) Collection {
	ret := _m.Called(_a0)

	var r0 Collection
	if rf, ok := ret.Get(0).(func(string) Collection); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Collection)
		}
	}

	return r0
}

// Find provides a mock function with given fields: collection, query
func (_m *DBH) Find(collection string, query interface{}) Query {
	ret := _m.Called(collection, query)

	var r0 Query
	if rf, ok := ret.Get(0).(func(string, interface{}) Query); ok {
		r0 = rf(collection, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Query)
		}
	}

	return r0
}

// SetGeoSpatialIndex provides a mock function with given fields: _a0
func (_m *DBH) SetGeoSpatialIndex(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
